<?xml version="1.0" encoding="us-ascii"?>
<!-- Just a test of new format -->

<experiment>
	<universe>
		<name>edu.usf.ratsim.experiment.universe.virtual.VirtUniverse</name>
		<params>
			<!-- Distance from which the food is accessible according to the universe -->
			<closeToFoodThrs>0.1</closeToFoodThrs>
			<!-- Map file -->
			<maze>multiscalemodel/src/edu/usf/ratsim/experiment/mazes/taxi.xml</maze>
			<!-- Display de window or run without GUI -->
			<display>false</display>
		</params>
	</universe>
	
	<robot>
		<!-- Robot to use. Use full name of the class -->
		<name>edu.usf.ratsim.robot.virtual.VirtualRobot</name>
		<params>
			<!-- Percentual translational noise -->
			<noise>.05</noise>
			<!-- Rotation noise added after translation -->
			<translationRotationNoise>.0195</translationRotationNoise>
			<!-- How many steps are projected for obstacle avoidance purpose -->
			<lookaheadSteps>1</lookaheadSteps>
			<!-- Half the field of view of the rat -->
			<halfFieldOfView>1.83</halfFieldOfView>
			<!-- How long can the rat see in meters -->
			<visionDist>1</visionDist>
			<!-- How far away can the robot eat food. This should be shorter than the universe
				threshold -->
			<closeThrs>.1</closeThrs>
		</params>
	</robot>
	
	<model>
		<!-- Model implementation -->
		<name>edu.usf.ratsim.experiment.subject.MultiScaleArtificialPCSubject</name>
		<params>
			<!-- Step length in meters -->
			<step>.05</step>
			<!-- Left rotation amount in radians -->
			<leftAngle>0.195</leftAngle>
			<!-- Right rotation amount in radians -->
			<rightAngle>-0.195</rightAngle>
			<!-- Number of conjunctive cell layers -->
			<numCCLayers>2</numCCLayers>
			<!-- Size of each layer in millimeters -->
			<layerLengths>3,3</layerLengths>
			<!-- Number of cells per layer -->
			<numCCCellsPerLayer>20000,20000</numCCCellsPerLayer>
			<!-- Type of learning -->
			<rlType>actorCritic</rlType>
			<!-- Type of conjunctive layer -> learning connection -->
			<voteType>gradient</voteType>
			<!-- Layer connection probabilities to action selection for gradient connections -->
			<votesConnProbs>.5,.5</votesConnProbs>
			<!-- Layer connection probabilities to value estimation for gradient connections -->
			<valueConnProbs>.5,.5</valueConnProbs>
			<!-- Minimum conjuntive layer cell radius -->
			<minPCRadius>.25</minPCRadius>
			<!-- Maximum conjuntive layer cell radius -->
			<maxPCRadius>.35</maxPCRadius>
			<!-- Type of conjunctive cell -->
			<placeCells>ExponentialWallConjCell</placeCells>
			<votesNormalizer>5</votesNormalizer>
			<valueNormalizer>5</valueNormalizer>
			<!-- Wall cell modulation. How much does a wall modulate the place field. Greater
				means less activity -->
			<wallParamA>10</wallParamA>
			<wallParamB>.1</wallParamB>
			<!-- Amount of cells placed near the goal -->
			<goalCellProportion>0.0</goalCellProportion>
			<!-- Minimum angular radius of conjuntive cells -->
			<minHDRadius>0.195</minHDRadius>
			<!-- Maximum angular radius of conjuntive cells -->
			<maxHDRadius>1.57</maxHDRadius>
			<!-- Number of intentions or maps -->
			<numIntentions>1</numIntentions>
			<!-- Reward value for food -->
			<foodReward>100000</foodReward>
			<!-- Reward value given when it doesnt eat -->
			<nonFoodReward>-1</nonFoodReward>
			<!-- Lambda discount factor for the taxic module-->
			<taxicDiscountFactor>1</taxicDiscountFactor>
			<!-- Lambda discount factor for the learning algorithm -->
			<rlDiscountFactor>1</rlDiscountFactor>
			<!-- Alpha for the learning algorithm -->
			<alpha>0.1</alpha>
			<!-- Initial value for values and action values -->
			<initialValue>0</initialValue>
			<!-- Value associated with a flashing feeder -->
			<flashingReward>500</flashingReward>
			<flashingNegReward>-10</flashingNegReward>
			<!-- Value associated with a non flashing feeder -->
			<nonFlashingReward>0</nonFlashingReward>
			<nonFlashingNegReward>-1</nonFlashingNegReward>
			<!-- Whether the rat can remember last two feeders -->
			<!-- TODO: take this out -->
			<rememberLastTwo>false</rememberLastTwo>
			<!-- Whether the taxic modules can contribute to value estimation -->
			<estimateValue>true</estimateValue>
			<!-- Cell contribution when not using normalization -->
			<!-- TODO: take out -->
			<cellContribution>0</cellContribution>
			<!-- Value assigned to exploration action-values -->
			<explorationReward>1</explorationReward>
			<!-- Half life value for decay exploration -->
			<explorationHalfLifeVal>0</explorationHalfLifeVal>
			<!-- Value assigned to wall actions for the wall taxic modules -->
			<wallTaxicVal>0</wallTaxicVal>
			<wallNegReward>-.0</wallNegReward>
			<!-- Minimum distance to take wall into account -->
			<wallTooCloseDist>.05</wallTooCloseDist>
			
			<avoidWallTaxicVal>0</avoidWallTaxicVal>
			<avoidWallTaxicDist>.1</avoidWallTaxicDist>
			<!-- Attentional span for still exploration -->
			<!-- TODO: look at this -->
			<maxAttentionSpan>20</maxAttentionSpan>
			<!-- Duration of still exploration actions -->
			<maxActionsSinceForward>10</maxActionsSinceForward>
			<stillExplorationVal>0</stillExplorationVal>
			<!-- Map dimensions for conjuntive cell placing -->
			<xmin>0</xmin>
			<ymin>0</ymin>
			<xmax>2</xmax>
			<ymax>2</ymax>
		</params>
	</model>
	<group>
		<name>0.2</name>
		<numMembers>64</numMembers>
		<params>
			<votesConnProbs>1,0</votesConnProbs>
			<valueConnProbs>1,0</valueConnProbs>
			<numCCCellsPerLayer>20000,1</numCCCellsPerLayer>
			<minPCRadius>.2</minPCRadius>
			<maxPCRadius>.2</maxPCRadius>
		</params>
		<tasks>
		</tasks>
	</group>
	<group>
		<name>0.25</name>
		<numMembers>64</numMembers>
		<params>
			<votesConnProbs>1,0</votesConnProbs>
			<valueConnProbs>1,0</valueConnProbs>
			<numCCCellsPerLayer>20000,1</numCCCellsPerLayer>
			<minPCRadius>.25</minPCRadius>
			<maxPCRadius>.25</maxPCRadius>
		</params>
		<tasks>
		</tasks>
	</group>
	<group>
		<name>0.3</name>
		<numMembers>64</numMembers>
		<params>
			<votesConnProbs>1,0</votesConnProbs>
			<valueConnProbs>1,0</valueConnProbs>
			<numCCCellsPerLayer>20000,1</numCCCellsPerLayer>
			<minPCRadius>.3</minPCRadius>
			<maxPCRadius>.3</maxPCRadius>
		</params>
		<tasks>
		</tasks>
	</group>
	<group>
		<name>0.35</name>
		<numMembers>64</numMembers>
		<params>
			<votesConnProbs>1,0</votesConnProbs>
			<valueConnProbs>1,0</valueConnProbs>
			<numCCCellsPerLayer>20000,1</numCCCellsPerLayer>
			<minPCRadius>.35</minPCRadius>
			<maxPCRadius>.35</maxPCRadius>
		</params>
		<tasks>
		</tasks>
	</group>
	<group>
		<name>0.4</name>
		<numMembers>64</numMembers>
		<params>
			<votesConnProbs>1,0</votesConnProbs>
			<valueConnProbs>1,0</valueConnProbs>
			<numCCCellsPerLayer>20000,1</numCCCellsPerLayer>
			<minPCRadius>.4</minPCRadius>
			<maxPCRadius>.4</maxPCRadius>
		</params>
		<tasks>
		</tasks>
	</group>
	<group>
		<name>0.45</name>
		<numMembers>64</numMembers>
		<params>
			<votesConnProbs>1,0</votesConnProbs>
			<valueConnProbs>1,0</valueConnProbs>
			<numCCCellsPerLayer>20000,1</numCCCellsPerLayer>
			<minPCRadius>.45</minPCRadius>
			<maxPCRadius>.45</maxPCRadius>
		</params>
		<tasks>
		</tasks>
	</group>
	<group>
		<name>Naive</name>
		<numMembers>64</numMembers>
		<params>
			<alpha>0.0</alpha>
		</params>
		<tasks>
		</tasks>
	</group>
	
	<group>
		<name>Symmetric</name>
		<numMembers>64</numMembers>
		<params>
			<votesConnProbs>.5,.5</votesConnProbs>
			<valueConnProbs>.5,.5</valueConnProbs>
		</params>
		<tasks>
		</tasks>
	</group>
	
	<group>
		<name>Asymmetric</name>
		<numMembers>64</numMembers>
		<params>
			<!-- Layer connection probabilities to action selection for gradient connections -->
			<votesConnProbs>1,0</votesConnProbs>
			<!-- Layer connection probabilities to value estimation for gradient connections -->
			<valueConnProbs>0,1</valueConnProbs>
		</params>
		<tasks>
		</tasks>
	</group>
	
	
	
	
	<!-- Training trial - Non-delayed cue phase -->
	<trial>
		<name>Training</name>
		<!-- Groups to apply the trial -->
		<groups>
			<group>0.2</group>
			<group>0.25</group>
			<group>0.3</group>
			<group>0.35</group>
			<group>0.4</group>
			<group>0.45</group>
			<group>Symmetric</group>
			<group>Small</group>
			<group>Large</group>
			<group>Asymmetric</group>
			<group>Naive</group>
		</groups>
		<!-- Tasks to perform beforehand -->
		<beforeTrialTasks>
			<task>
				<name>edu.usf.experiment.task.EnableFeeders</name>
				<params>
					<feeders>0</feeders>
				</params>
			</task>
			
			<task>
				<name>edu.usf.experiment.task.FlashActivateRandomFeeder</name>
			</task>
		</beforeTrialTasks>
		<!-- Episodes definition -->
		<episodes>
			<!-- Number of episodes -->
			<number>1</number>
			<!-- Sleep between cycles for visualization -->
			<sleep>0</sleep>
			<!-- Tasks to perform before each episode -->
			<beforeEpisodeTasks>
				<!-- Place the animat in a given place -->
				<task>
					<name>edu.usf.experiment.task.PlaceRobotInitally</name>
					<params>
						<point>
							<x>1</x>
							<y>1</y>
							<theta>1.57</theta>
						</point>
					</params>
				</task>
				
			</beforeEpisodeTasks>
			<!-- Tasks to performe before each cycle -->
			<beforeCycleTasks>
			</beforeCycleTasks>
			<!-- Tasks to performe after each cycle -->
			<afterCycleTasks>
				<!-- Release food from the feeder if the rat is close -->
				<task>
					<name>edu.usf.experiment.task.ReleaseFoodFromFeeders</name>
				</task>
			</afterCycleTasks>
			<!-- Loggers to execute after each cycle -->
			<afterCycleLoggers>
				<!-- Log the subject position -->
				<logger>
					<name>edu.usf.experiment.log.SubjectPositionLogger</name>
					<params>
					</params>
				</logger>
			</afterCycleLoggers>
			<!-- Loggers to execute after each episode -->
			<afterEpisodeLoggers>
				<!-- Log each wall position -->
				<logger>
					<name>edu.usf.experiment.log.WallLogger</name>
					<params>
					</params>
				</logger>
				<logger>
					<name>edu.usf.experiment.log.FeederLogger</name>
				</logger>
				
				<!-- log value -->
				<logger>
					<name>edu.usf.experiment.log.ValueLogger</name>
				</logger>
			</afterEpisodeLoggers>
			<!-- Tasks to execute after each episode -->
			<afterEpisodeTasks>
			</afterEpisodeTasks>
			<!-- Conditions upon which the episode ends -->
			<stopConditions>
				<!-- Timeout cycles -->
				<condition>
					<name>edu.usf.experiment.condition.MaxCycles</name>
					<params>
						<max>1000</max>
					</params>
				</condition>
				<!-- Has eaten from 100 feeders -->
				<condition>
					<name>edu.usf.experiment.condition.FoundFoodStopCond</name>
					<params>
					</params>
				</condition>
			</stopConditions>
			<!-- Plotters to execute after each episode -->
			<afterEpisodePlotters>
				<!-- Copy the maze file to the episode folder -->
				<plotter>
					<name>edu.usf.experiment.plot.CopyMazeFile</name>
				</plotter>
				<!-- Convert csv to rdata -->
				<plotter>
					<name>edu.usf.experiment.plot.CSVConverter</name>
				</plotter>
				<!-- Get time info from position information -->
				<plotter>
					<name>edu.usf.experiment.plot.SummarizeRuntimes</name>
				</plotter>
				<!-- Plot path for each episode -->
				
				<!-- Plot value -->
				<plotter>
					<name>edu.usf.experiment.plot.ValuePlotter</name>
				</plotter>
			</afterEpisodePlotters>
		</episodes>
		<!-- Tasks to perform after the trial has ended -->
		<afterTrialTasks>
		</afterTrialTasks>
		<!-- Loggers to execute after the trial has ended -->
		<afterTrialLoggers>
			
		</afterTrialLoggers>
		<!-- Plotters to execute after the trial has ended -->
		<afterTrialPlotters>
			<!-- Make a gif out of all value plots for this trial -->
			<plotter>
				<name>edu.usf.experiment.plot.GifMaker</name>
				<params>
					<plot>value</plot>
				</params>
			</plotter>
			<plotter>
				<name>edu.usf.experiment.plot.RuntimePerEpisodePlotter</name>
			</plotter>
			<plotter>
				<name>edu.usf.experiment.plot.PlotGatherer</name>
			</plotter>
		</afterTrialPlotters>
	</trial>
	
	<afterExperimentPlotters>
		<plotter>
			<name>edu.usf.experiment.plot.RuntimePerEpisodePlotter</name>
		</plotter>
		<plotter>
			<name>edu.usf.experiment.plot.PlotGatherer</name>
		</plotter>
	</afterExperimentPlotters>
	
	
	
</experiment>
