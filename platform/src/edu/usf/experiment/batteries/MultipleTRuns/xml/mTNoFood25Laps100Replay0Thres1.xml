<?xml version="1.0" encoding="us-ascii"?>
	
<experiment>
	<!-- <seed>-59875563504154406</seed> -->
	
	 <!-- load will load the subject (indicated by the input to the program) as saved after the specified episode  of the specified  trial-->
	<!-- <load>
		<episode>3624</episode>
		<trial>Travel</trial>
	</load>  -->
	
	<universe>
		<name>edu.usf.ratsim.experiment.universe.virtual.VirtUniverse</name>
		<params>
			<!-- Distance from which the food is accessible according to the universe -->
			<closeToFoodThrs>1</closeToFoodThrs>
			<!-- Map file -->
			<maze>multiscalemodel/src/edu/usf/ratsim/experiment/mazes/multipleTmaze.xml</maze>
			<!-- Display de window or run without GUI -->
			<display>false</display>
		</params>
	</universe>
	
	<robot>
		<!-- Robot to use. Use full name of the class -->
		<name>edu.usf.ratsim.robot.virtual.VirtualRobot</name>
		<params>
			<!-- Percentual translational noise -->
			<noise>.0</noise>
			<!-- Rotation noise added after translation -->
			<translationRotationNoise>0</translationRotationNoise>
			<!-- How many steps are projected for obstacle avoidance purpose -->
			<lookaheadSteps>1</lookaheadSteps>
			<!-- Half the field of view of the rat -->
			<halfFieldOfView>4</halfFieldOfView>
			<!-- How long can the rat see in meters -->
			<visionDist>10</visionDist>
			<!-- How far away can the robot eat food. This should be shorter than the universe
				threshold -->
			<closeThrs>.1</closeThrs>
		</params>
	</robot>
	
	<model>
		<!-- Model implementation -->
		<name>edu.usf.ratsim.experiment.subject.multipleT.MultipleTSubject</name>
		<params>1
		
			<!-- subject params: -->
			<!-- Step length in meters -->
			<step>.08</step>
			<!-- Left rotation amount in radians -->
			<!-- <leftAngle>0.195</leftAngle> -->
			<!-- Right rotation amount in radians -->
			<!-- <rightAngle>-0.195</rightAngle> -->
			
			<!-- model params: -->
			
			<!-- Type of learning -->
			<!--  <rlType>actorCritic</rlType> -->
			<!-- discount factor in rl -->
			<discountFactor>0.999</discountFactor>
			<!-- rl learning rate -->
			<learningRate>0.6</learningRate>
			<!-- reward when eating -->
			<foodReward>1.0</foodReward>
			<!-- transition matrix learning rate -->
			<wTransitionLR>1.0</wTransitionLR>
			
			<!-- sessions, laps, and replay -->
			<noFoodLaps>25</noFoodLaps>
			<laps>100</laps>
			<cantReplay>0</cantReplay>
			<!-- threshold to propagate PC activation during 
			     sleep state. Should be numPC/50           -->
			<replayThres>1.0</replayThres>
			
			<!-- number of directions the rat con move towards -->
			<numActions>8</numActions>
			<sameActionBias>0.85</sameActionBias>
			
			<!-- Minimum conjuntive layer cell radius -->
			<PCRadius>.08</PCRadius><!-- small = 0.08, big=0.2 -->
			<!-- Cells per side of the square -->
			<numPC>1300</numPC><!-- 430 -->
			<!-- Type of conjunctive cell -->
			<placeCells>exponentialMultipleT</placeCells>
			<!-- Map dimensions for conjuntive cell placing -->
			
			
			<maxDistanceSensorDistance>2</maxDistanceSensorDistance>
			
			<awakeFoodDistanceThreshold>0.1</awakeFoodDistanceThreshold>
			<asleepFoodDistanceThreshold>0.4</asleepFoodDistanceThreshold>

			<!-- Order in which feeders are visited -->
			<!--  <feederOrder>$(feederOrder)</feederOrder> -->
			<!--<feederOrder>1,2</feederOrder>-->
		</params>
	</model>
	
	<group>
		<name>Control</name>
		<numMembers>1</numMembers>
		<params>
		</params>
		<tasks>
		</tasks>
	</group>
	
	<!-- Task to be performed before the eperiment -->
	<beforeExperimentTasks>
		<!-- Enable feeders all feeders -->
		<!-- <task>
			<name>edu.usf.experiment.task.AddAllFeedersTask</name>
			<params>
				<feederFile>multiscalemodel/src/edu/usf/ratsim/experiment/feederPositions/positionsTSP21Feeders</feederFile>
			</params>
		</task> -->
		
		<!-- x: left arm: 0, right arm: 3.6 ~~ (lab_origin, lab_origin + length), y=10.5 -->
		<task>
			<name>edu.usf.experiment.task.AddFeederTask</name>
			<params>
				<id>1</id>
				 <x>0</x> 
				<y>10.5</y> 
			</params>
		</task>

		
		<task>
			<name>edu.usf.experiment.task.EnableAllFeeders</name>
		</task>
	</beforeExperimentTasks>
	
	<!-- Loggers to be executed before the eperiment -->
	<beforeExperimentLoggers>
		<!-- Log walls -->
		<!--<logger> <name>edu.usf.experiment.log.WallLogger</name> <params> </params> </logger>-->
		<!-- Log conjunctive cells -->
		
	</beforeExperimentLoggers>
	<!-- Plots to perform before the experiment -->
	<beforeExperimentPlotters>
		<!-- Convert CSV files to rdata files -->
		<!-- <plotter> <name>edu.usf.experiment.plot.CSVConverter</name> </plotter> -->
		<!-- <plotter> <name>edu.usf.experiment.plot.PlotGatherer</name> </plotter> -->
		<!--<plotter> <name>edu.usf.ratsim.experiment.plot.PCPlotter</name> </plotter>-->
	</beforeExperimentPlotters>
	
	<!-- Training trial - Non-delayed cue phase -->
	<trial>
		<name>Travel</name>
		<!-- Groups to apply the trial -->
		<groups>
			<group>Control</group>
		</groups>
		<!-- Tasks to perform beforehand -->
		<beforeTrialTasks>
		</beforeTrialTasks>
		<!-- Episodes definition -->
		<episodes>
			<!-- Number of episodes -->
			<number>125</number><!-- 24 session * (80 + 80 laps * 8 replays) =   -->
			<!-- Sleep between cycles for visualization -->
			<sleep>0</sleep>
			<!-- Tasks to perform before each episode -->
			<beforeEpisodeTasks>
				<!-- <task>
					<name>edu.usf.experiment.task.ActivateAllEnabledFeeders</name>
				</task> -->
				<!-- Place the animat in a given place -->
				<task>
					<name>edu.usf.experiment.task.PlaceRobotInitally</name>
					<params>
						<!--<filename>$(ratpath)</filename>-->
						<!--<pointXYW>$(startPosition)</pointXYW> -->
						
						<point>
							<x>0</x>
							<y>0.1</y>
							<theta>1.57</theta>
						</point>
						
					</params>
				</task>
				<task>
					<name>edu.usf.experiment.task.ReleaseFoodFromFeeders</name>
				</task>
				
				
			</beforeEpisodeTasks>
			<!-- Tasks to performe before each cycle -->
			<beforeCycleTasks>
			</beforeCycleTasks>
			<!-- Tasks to performe after each cycle -->
			<afterCycleTasks>
				<task>
					<name>edu.usf.experiment.task.ReleaseFoodFromFeeders</name>
				</task>
				<!--<task>
					<name>edu.usf.experiment.task.PlaceRobotFile</name>
					<params>
						<filename>$(ratpath)</filename>
					</params> 
				</task>-->
			</afterCycleTasks>
			<!-- Loggers to execute after each cycle -->
			<afterCycleLoggers>
				<!-- Log the subject position -->
				<logger>
					<name>edu.usf.experiment.log.SubjectPositionLogger</name>
					<params>
					</params>
				</logger>
				<!--  <logger>
					<name>edu.usf.ratsim.experiment.log.PCActivityLogger</name>
				</logger>-->
			</afterCycleLoggers>
			<!-- Loggers to execute after each episode -->
			<afterEpisodeLoggers>
				<!-- Log each wall position -->
				<logger>
					<name>edu.usf.experiment.log.WallLogger</name>
					<params>
					</params>
				</logger>
				<logger>
					<name>edu.usf.experiment.log.FeederLogger</name>
				</logger>
				<!-- <logger>
					<name>edu.usf.ratsim.experiment.log.PCLogger</name>
				</logger> -->
			</afterEpisodeLoggers>
			<!-- Tasks to execute after each episode -->
			<afterEpisodeTasks>
				<task>
					<name>edu.usf.experiment.task.SaveSubject</name>
				</task>
			</afterEpisodeTasks>
			<!-- Conditions upon which the episode ends -->
			<stopConditions>
				<!-- Timeout cycles -->
				<condition>
					<name>edu.usf.experiment.condition.MaxCycles</name>
					<params>
						<max>2000</max>
					</params>
				</condition>
				<!-- Has eaten from 5 feeders -->
				<condition>
					<name>edu.usf.experiment.condition.FoundNFoodStopCond</name>
					<params>
						<!--  <n>$(nFoodStopCondition)</n>-->
						<n>1</n>
						<extraCycles>1</extraCycles>
					</params>
				</condition>
				<!-- Somebody sets done flag condition -->
				<condition>
					<name>edu.usf.experiment.condition.DoneCondition</name>
					<params>
					</params>
				</condition>
				<condition>
					<name>edu.usf.ratsim.experiment.subject.multipleT.PCActivationBelowThresholdCondition</name>
					<params>
					</params>
				</condition>
				<condition>
					<name>edu.usf.ratsim.experiment.subject.multipleT.LoopInPathCondition</name>
					<params>
					</params>
				</condition>
			</stopConditions>
			<!-- Plotters to execute after each episode -->
			<afterEpisodePlotters>
				<!-- Copy the maze file to the episode folder -->
				<!--<plotter>
					<name>edu.usf.experiment.plot.CopyMazeFile</name>
				</plotter>-->
				<!-- Convert csv to rdata -->
				<!-- <plotter>
					<name>edu.usf.experiment.plot.CSVConverter</name>
				</plotter>-->
				<!-- Get time info from position information -->
				<!-- <plotter>
					<name>edu.usf.experiment.plot.SummarizeRuntimes</name>
				</plotter>-->
				<!-- Plot path for each episode -->
				<!-- <plotter>
					<name>edu.usf.experiment.plot.PathPlotter</name>
				</plotter>
				<plotter>
					<name>edu.usf.ratsim.experiment.plot.PCPlotter</name>
				</plotter>-->
				
			</afterEpisodePlotters>
		</episodes>
		<!-- Tasks to perform after the trial has ended -->
		<afterTrialTasks>
		</afterTrialTasks>
		<!-- Loggers to execute after the trial has ended -->
		<afterTrialLoggers>
			
		</afterTrialLoggers>
		<!-- Plotters to execute after the trial has ended -->
		<afterTrialPlotters>
			<!-- <plotter>
				<name>edu.usf.experiment.plot.RuntimePerEpisodePlotter</name>
			</plotter> -->
		</afterTrialPlotters>
	</trial>
	
	<!-- Tasks to perform after the experiment is over -->
	<afterExperimentTasks>
	</afterExperimentTasks>
	<!-- Loggers to execute after the experiment is over -->
	<afterExperimentLoggers>
	</afterExperimentLoggers>
	<!-- Plotters to execute after the experiment is over -->
	<afterExperimentPlotters>
		<plotter>
			<name>edu.usf.experiment.plot.RuntimePerTrialPlotter</name>
		</plotter>
		
	</afterExperimentPlotters>
</experiment>
